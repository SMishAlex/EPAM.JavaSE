package com.epam.courses.javase.msid.unit02.task1;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.*;

/**
 * Created by msid on 24.02.17.
 */
public class PenTest {

    private final ByteArrayOutputStream output = new ByteArrayOutputStream();
    private Pen pen;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(output));
    }

    @Before
    public void createPen() {
        pen = new Pen();
    }

    @After
    public void cleanUpStreams() {
        System.setOut(null);
    }

    //what is pan for? possible to write some info...
    @Test
    public void writeStringTest() {
        String s = "Some text";
        pen.write(s);
        assertEquals(s, output.toString());
    }

    //moreover we could wanna write line
    @Test
    public void writeLineTest() {
        String s = "output line";
        pen.writeLine(s);
        assertEquals(s + "\n", output.toString());
    }

    //pen's always had color
    @Test
    public void colorTest() {
        Color color = new Color(0, 0, 0);
        pen.setColor(color);
        assertEquals(pen.getColor(), color);
    }

    @Test
    public void ecualsTest() {
        Pen pen1 = new Pen();
        assertTrue(pen.equals(pen1));
    }

    @Test
    public void ecualsHimselfTest() {
        assertTrue(pen.equals(pen));
    }

    @Test
    public void ecualsNotPenTest() {
        assertFalse(pen.equals(output));
    }

    @Test
    public void writeWithColorTest() {
        Color color = new Color(100, 100, 100);
        pen.setColor(color);
        String info = "Some text";
        String logicOut = "Imagine it's written with " + color + " color " + info;
        pen.writeWithColor(info);
        assertEquals(logicOut, output.toString());
    }

    @Test
    public void hashTest(){
        int penHesh = pen.hashCode();
        Pen pen1 = new Pen();
        int pen1Hash = pen1.hashCode();
        assertTrue(penHesh==pen1Hash);
    }

    @Test
    public void toStringTest(){
        System.out.println(pen.toString());
        String s = "Pen{" +
                "color=" + pen.getColor() +
                '}';
        assertEquals(s + '\n',output.toString());
    }
}